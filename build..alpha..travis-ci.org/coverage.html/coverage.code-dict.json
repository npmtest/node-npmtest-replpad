{"/home/travis/build/npmtest/node-npmtest-replpad/test.js":"/* istanbul instrument in package npmtest_replpad */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-replpad/lib.npmtest_replpad.js":"/* istanbul instrument in package npmtest_replpad */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_replpad = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_replpad = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-replpad/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-replpad && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_replpad */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_replpad\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_replpad.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_replpad.rollup.js'] =\n            local.assetsDict['/assets.npmtest_replpad.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_replpad.__dirname + '/lib.npmtest_replpad.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/repreprep.js":"'use strict';\n\nvar repl            =  require('repl')\n  , path            =  require('path')\n  , cardinal        =  require('cardinal')\n  , util            =  require('util')\n  , xtend           =  require('xtend')\n  , state           =  require('./lib/state')\n  , config          =  require('./config/current')\n  , initConfig      =  require('./config/init')\n  , managePlugins   =  require('./lib/manage-plugins')\n  , initWatcher     =  require('./lib/watcher-init')\n  , feedEdits       =  require('./lib/feedEdits')\n  , core            =  require('./lib/dox/core')\n  , log             =  require('./lib/log')\n  , instructions    =  require('./lib/instructions')\n  , initBuiltins    =  require('./lib/builtins/init')\n  , findexquire     =  require('./lib/findexquire')\n  , stdin           =  process.stdin\n  , stdout          =  process.stdout\n  ;\nfunction createRepl(opts) {\n  var r = repl.start(opts);\n  log.repl = r;\n\n  r.state = state;\n  r.config = config;\n\n  global.$repl = r;\n  global.require = findexquire(path.join(process.cwd(), 'repl.js'), true);\n\n  r.writer = function (s) {\n    // i.e. Function.src returns the higlighted string at __replpad_print_raw__ which we just want to print as is\n    var printRaw = s && s.__replpad_print_raw__;\n    return printRaw || util.inspect(s, config.inspect.showHidden, config.inspect.depth, true);\n  };\n\n  return r;\n}\n\nfunction boot(opts) {\n  instructions(opts.output);\n\n  var repl = createRepl(opts);\n  state.__defineGetter__('repl', function () { return repl; });\n\n  managePlugins();\n  initBuiltins();\n\n  core(repl);\n  return repl;\n}\n\nfunction getReplOpts (opts) {\n  return xtend({\n      input           :  stdin\n    , output          :  stdout\n    , ignoreUndefined :  true\n    , useColors       :  true\n    , useGlobal       :  true\n    , terminal        :  true\n  }, opts);\n}\n\n\nmodule.exports = function repreprep(root, opts) {\n\n  if (typeof root === 'object') {\n    opts = root;\n    root = null;\n  }\n  opts = opts || {};\n\n  var replOpts = getReplOpts(opts);\n  log.output = replOpts.output;\n\n  initConfig();\n\n  // override prompt with the one given in opts AFTER config was initialized\n  config.prompt = opts.prompt || config.prompt || 'pad > ';\n  replOpts.prompt = config.prompt;\n\n  if (!root) {\n    log.print('Watching no files since no path was specified.');\n    return boot(replOpts);\n  }\n\n  var watcher = initWatcher(root);\n  watcher.on('initialized', function () {\n    boot(replOpts);\n    var feedEdit = feedEdits(stdin, stdout);\n    watcher.on('file-changed', feedEdit);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/state.js":"module.exports = {\n    lastFedFile       :  null\n  , fileFeedSuspended :  false\n  , feedingFile       :  false\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/config/current.js":"'use strict';\n\n/**\n * Sets some required defaults to ensure that they are present even if the user doesn't configure them.\n * Most of them will be overridden when the user configuration is sourced.\n */\n\nmodule.exports = require('./default-config');\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/config/default-config.js":"'use strict';\n\n/**\n * The replpad version for which this config was originally created.\n * Important when upgrading replpad.\n * @name version\n */\nexports.version = '0.10';\n\n/**\n  * Declares vim like key mappings\n  * @name map\n  * @function\n  * @param nmap {Function} to declare normal mode mappings: nmap(from, to)\n  * @param imap {Function} to declare insert mode mappings: imap(from, to)\n  */\nexports.map = function (nmap, imap) {\n\n  // map 'jk' to 'esc' to switch to normal mode\n  imap('jk', 'esc');\n\n  // navigate backward in history  via 'ctrl-k' in insert mode\n  imap('ctrl-k', 'ctrl-p');\n\n};\n\n/**\n * Properties that configure how code is piped into the repl from a changed file\n * @name feed\n */\nexports.feed = {\n\n    /**\n    * Configures the format into which code is rewritten before it is piped.\n    * Note that some dont have any effect when compact is 'true' as is the default.\n    * @name format\n    */\n    format: {\n        indent      :  { style: '  ', base: 0 }\n      , quotes      :  'single'\n      , json        :  false\n      , renumber    :  false\n      , hexadecimal :  false\n      , escapeless  :  false\n      , compact     :  true\n      , parentheses :  false\n      , semicolons  :  true\n    }\n\n    /**\n     * Filters specify which directories/files are watched for changes.\n     * A filter can be a glob string, and array of glob string or a function returning true | false.\n     * More information at: https://github.com/thlorenz/readdirp#filters\n     */\n  , fileFilter      :  '*.js'\n  , directoryFilter :  [ '!.*', '!node_modules' ]\n\n    // The name under which module.exports are exposed in the repl after a file was piped.\n  , exports         :  '$'\n};\n\n\n/**\n * Properties that configure how inspected objects are printed.\n * @name inspect\n */\nexports.inspect =  {\n    /**\n    * The default depth to which and object is traversed when printed.\n    * Can be set in repl via: .depth\n    */\n    depth : 2\n    /**\n    * Configure if hidden properties are included during object traversal.\n    * Can be set in repl via: .hidden\n    */\n  , showHidden: false\n};\n\n/**\n * Toggles if piped code is syntax highlighted before being sourced in the repl\n * Can be set in repl via: .highlight\n * @name highlight\n */\nexports.highlight = false;\n\n\n/**\n * Set the repl prompt\n * Can be set in repl via: $repl.prompt = 'your prompt'\n * @name prompt\n */\nexports.prompt = 'pad > ';\n\n/**\n  * Enable plugins by setting them true, disable them by setting them false.\n  * Plugins that are not set to true|false are included by default (for backwards compat)\n  * Removing this entire section enables all plugins.\n  * @name plugins\n  */\nexports.plugins = {\n    // adds vim key bindings and maps to the repl\n    vim: true\n\n    // jumps cursor to matching brace, bracket, paren and quote when it is entered\n  , matchtoken: true\n};\n\n/**\n * Configure the scriptie talkie feature (activated via '.talk') which evaluates a script in chunks and prints\n * intermediate results.\n * @name scriptietalkie\n */\nexports.scriptietalkie = {\n\n    // at what point is an object diff compacted to one line\n    joinLinesAt: 20\n\n    // at which length is an object diff line cut off with an ellipsis\n  , maxLineLength: 380\n\n    // set to true to activate scriptie talkie when replpad starts, you can toggle this setting via the '.talk' command\n  , active: false\n};\n\n/**\n * Configure what happens when you execute .dox() on an nmp package, i.e. request.dox()\n * In either case the package homepage and/or gitub url are printed to the terminal.\n * If no internet connection is available the readme will be rendered locally and the path to the file printed and \n * the file automatically opened in the browser if the `open` flag is set.\n * @name readme\n */\nexports.readme = {\n\n    // print rendered readme markdown inside the repl\n    render: true\n\n    // automatically open the github url or locally rendered readme file in your browser\n  , open: false\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/config/init.js":"'use strict';\n\nvar resolve =  require('./resolve')\n  , current =  require('./current')\n  ; \n\nfunction override(prop, overridee, overrider) {\n  var to = overridee[prop]\n    , from = overrider[prop];\n  if (!from) return;\n\n  Object.keys(from).forEach(function (k) {\n    to[k] = from[k];\n  });\n}\n\n// TODO: combining defaults and user config into current config needs tests\nfunction initializeCurrent(conf) {\n  var structs = [ 'feed', 'inspect' ];\n\n  structs.forEach(function (x) { override(x, current, conf); });\n\n  Object.keys(conf)\n    .filter(function (k) { return !~structs.indexOf(k); })\n    .forEach(function (k) { current[k] = conf[k]; });\n}\n\nmodule.exports = function () {\n  var config = resolve();\n\n  initializeCurrent(config);\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/config/resolve.js":"'use strict';\n\nvar mkdirp =  require('mkdirp')\n  , path   =  require('path')\n  , fs     =  require('fs')\n  , paths  =  require('./paths')\n  , utl    =  require('../lib/utl')\n  , log    =  require('../lib/log')\n  , colors =  require('ansicolors')\n  ;\n\nfunction loadFrom (p) {\n  log.print(colors.yellow('\\nLoading replpad config from: %s\\n'), p);\n  return require(p);\n}\n\nmodule.exports = function () {\n  if (!utl.existsSync(paths.configFile)) {\n\n    mkdirp.sync(path.dirname(paths.configFile));\n\n    try {\n      utl.copyFileSync(require.resolve('./default-config'), paths.configFile);\n      return loadFrom(paths.configFile);\n    } catch (err) {\n      log.error('Unable to create config file', err);\n      log.error('Unable to create config file', err.stack);\n      log.infoln('Using default config');\n      return require('./default-config');\n    }\n\n    log.print(colors.yellow('\\nCreated replpad config at: %s\\n'), paths.configFile);\n  } else {\n\n    // Guard against errors in customized config file\n    try {\n      return loadFrom(paths.configFile);\n    } catch(e) {\n      log.error('Sorry, it looks like you have an error in your config file at: ', paths.configFile);\n      log.error(e);\n      log.infoln('Using default config until the problem is fixed.');\n      return require('./default-config');\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/config/paths.js":"'use strict';\n\nvar path       =  require('path')\n  , home       =  process.env.HOME || process.env.USERPROFILE\n  , root       =  path.join(home, '.config', 'replpad')\n  , cachesRoot =  path.join(root, 'cache')\n  , caches     =  path.join(cachesRoot, process.version)\n  ;\n\nmodule.exports = {\n    root       :  root\n  , caches     :  caches\n  , configFile :  path.join(root, 'config.js')\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/utl.js":"'use strict';\n\nvar path    =  require('path')\n  , fs      =  require('fs')\n  , util    =  require('util')\n  , logFile =  path.join(__dirname, '../logs/debug.log');\n\nexports.shallowClone = function shallowClone(obj) {\n  var clone = {};\n  Object.keys(obj).forEach(function (k) {\n    clone[k] = obj[k];\n  });\n  return clone;\n};\n\nexports.pad = function pad(s, len, padding) {\n  len = len || 0;\n  padding = padding || ' ';\n\n  return len + 1 >= s.length\n    ? s + new Array(len + 1 - s.length).join(padding)\n    : s;\n};\n\nexports.log = function log(obj, depth) {\n  var s = util.inspect(obj, false, depth || 5, true);\n  fs.appendFileSync(logFile, s);\n};\n\nexports.inspect = function(obj, depth) {\n  return util.inspect(obj, false, depth || 5, true);\n};\n\nexports.existsSync =  fs.existsSync || path.existsSync;\n\n/**\n * Copies srcFile to tgtFile without checking if paths are valid and calls back when done.\n * srcFile is streamed to tgtFile\n *\n * @name copyFile\n * @function\n * @param srcFile {String}\n * @param tgtFile {String}\n * @param cb {Function} called when file is completely copied or an error occurs\n */\nexports.copyFile = function (srcFile, tgtFile, cb) {\n  var readStream = fs.createReadStream(srcFile)\n    , writeStream = fs.createWriteStream(tgtFile);\n\n  writeStream\n    .on('close', cb)\n    .on('error', cb);\n\n  readStream\n    .on('error', cb);\n\n  readStream.pipe(writeStream);\n};\n\n\n/**\n * Copies srcFile to tgtFile without checking if paths are valid and returns when done.\n * srcFile is copied to tgtFile in chunks\n *\n * @name copyFileSync\n * @function\n * @param srcFile {String}\n * @param tgtFile {String}\n * @return {void}\n */\nexports.copyFileSync = function(srcFile, tgtFile) {\n  var buflen    =  64 * 1024\n    , buf       =  new Buffer(buflen)\n    , fdr       =  fs.openSync(srcFile, 'r')\n    , fdw       =  fs.openSync(tgtFile, 'w')\n    , bytesRead =  1\n    , pos       =  0\n    ;\n\n  while (bytesRead > 0) {\n    bytesRead = fs.readSync(fdr, buf, 0, buflen, pos);\n    fs.writeSync(fdw, buf, 0, bytesRead);\n    pos += bytesRead;\n  }\n\n  fs.closeSync(fdr);\n  return fs.closeSync(fdw);\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/log.js":"'use strict';\n\nvar format = require('util').format\n  , colors = require('ansicolors')\n  , debug = !!process.env.REPLPAD_DEBUG;\n\nmodule.exports = {\n    silly: function () {\n      if (!debug) return;\n      this.output.write(colors.brightBlack('SILL ') + colors.brightBlack(format.apply(this, arguments)) + '\\n');\n    }\n  , info: function () {\n      this.output.write(colors.green('INFO ') + colors.brightBlack(format.apply(this, arguments)) + '\\n');\n    }\n  , warn: function () {\n      this.output.write(colors.blue('WARN ') + format.apply(this, arguments) + '\\n');\n    }\n  , error: function () {\n      this.output.write(colors.red('ERR! ') + format.apply(this, arguments) + '\\n');\n    }\n  , print: function () {\n      this.output.write(colors.brightBlack(format.apply(this, arguments)) + '\\n');\n    }\n  , sillyln: function () {\n      if (!debug) return;\n      this.silly.apply(this, arguments);\n      this.displayPrompt();\n    }\n  , infoln: function () {\n      this.info.apply(this, arguments);\n      this.displayPrompt();\n    }\n  , warnln: function () {\n      this.warn.apply(this, arguments);\n      this.displayPrompt();\n    }\n  , errorln: function () {\n      this.error.apply(this, arguments);\n      this.displayPrompt();\n    }\n  , println: function () {\n      this.print.apply(this, arguments);\n      this.displayPrompt();\n    }\n  , displayPrompt: function () {\n      if (!this.repl) return;\n      this.repl.displayPrompt();\n    }\n  // will be set by repreprep when initialized\n  , repl: undefined\n  , output: undefined\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/manage-plugins.js":"'use strict';\n\nvar log     =  require('./log')\n  , config  =  require('../config/current')\n  , inspect =  require('./utl').inspect\n  , state   =  require('./state')\n  , wire    =  require('./wire')\n  ;\n\nfunction disabled(config, plugin) {\n  if (!config.plugins) return false;\n\n  var val = config.plugins[plugin];\n  return val !== undefined && val !== true;\n} \n\nfunction initVim(config, repl) {\n  if (disabled(config, 'vim')) return;\n\n  var vim = require('../lib/vim-rli')(repl);\n  repl.imap = vim.map.insert;\n  repl.nmap = vim.map.normal;\n  repl.__defineGetter__('maps', function () { log.println(inspect(vim.map.mappings)); });\n\n  wire.on('emit-code.start', vim.forceInsert.bind(vim));\n\n  if (config.map) {\n    if (typeof config.map !== 'function')\n      log.errorln('Found \"map\" in config, but it is a [%s]. It needs to be a function (ignoring for now).', typeof config.map);\n    else \n      config.map(vim.map.normal, vim.map.insert);\n  }\n}\n\nfunction initMatchToken(config, repl) {\n  if (disabled(config, 'matchtoken')) return;\n\n  require('readline-matchtoken')(repl.rli);\n}\n\nmodule.exports = function applyConfig() {\n  var repl = state.repl;\n\n  initVim(config, repl);\n  initMatchToken(config, repl);\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/wire.js":"'use strict';\n\nvar events = require('events')\n  , emitter = new events.EventEmitter();\n\nmodule.exports = emitter;\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/watcher-init.js":"'use strict';\n\nvar watcher =  require('./watcher')\n  , colors  =  require('ansicolors')\n  , log     =  require('./log')\n  , config  =  require('../config/current')\n  , events  =  require('events')\n  ;\n\nfunction reportWatchedFiles(watchers) {\n  log.println('Watching ' + colors.brightGreen('[' + Object.keys(watchers).length + ' files]'));\n}\n\nmodule.exports = function initWatcher(root) {\n  var watcherInitialized\n    , emitter = new events.EventEmitter()\n    , feed = config.feed\n    , opts = {\n        fileFilter      :  feed.fileFilter      || '*.js'\n      , directoryFilter :  feed.directoryFilter || [ '!.*', '!node_modules' ]\n      , root            :  root\n      }\n    ;\n\n  watcher.watchTree(\n      opts\n    , function onAddedWatch(info) {\n        try {\n          log.print('Started watching: ' + info.entry.path);\n\n          // log total every time a new file is added after watcher was initialized and source it\n          if (watcherInitialized) { \n            reportWatchedFiles(info.all);\n            emitter.emit('file-changed', info.entry);\n          }\n        } catch(e) {\n          console.trace();\n          log.error(e);\n        }\n      }\n    , function onChanged(file) { \n        emitter.emit('file-changed', file);\n      }\n    , function onWatcherInitialized(watchers) {\n        watcherInitialized = true;\n        reportWatchedFiles(watchers);\n        emitter.emit('initialized', watchers);\n      }\n  );\n\n  return emitter;\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/watcher.js":"'use strict';\n\nvar fs          =  require('fs')\n  , readdirp    =  require('readdirp')\n  , chokidar    =  require('chokidar')\n  , utl         =  require('./utl')\n  , log         =  require('./log')\n  , watchers    =  {}\n  , watchedDirs =  {}\n  ;\n\nfunction dateEqual(d1, d2) {\n  return d1.toGMTString() === d2.toGMTString();\n}\n\nfunction watchFile(entry, eventName, startedWatching, update) {\n  var fullPath = entry.fullPath;\n\n  if (watchers[fullPath]) return;\n  startedWatching(entry);\n\n  chokidar.watch(fullPath, { persistent: true })\n    .on('change', function () {\n      var prevStat = watchers[fullPath].stat\n        , entry    = watchers[fullPath].entry\n\n      fs.stat(fullPath, function (err, stat) {\n        if (err) return log.error('watcher', err);\n\n        // ignore atime changes (read access)\n        if ( prevStat\n          && dateEqual(prevStat.mtime, stat.mtime)\n          && dateEqual(prevStat.ctime, stat.ctime)) return;\n\n        watchers[fullPath].stat = stat\n        update(entry);\n      });\n    });\n}\n\nfunction watchTree(options, addedWatch, update, watching) {\n\n  function startedWatching(entry) {\n    watchers[entry.fullPath] = { lastChange: new Date(), entry: entry };\n    addedWatch({ entry: entry, all: watchers });\n  }\n\n  function watchDir(fullPath) {\n    if (watchedDirs[fullPath]) return;\n    watchedDirs[fullPath] = true;\n\n    chokidar.watch(fullPath, { persistent: true })\n      .on('add', function () {\n        var cloned = utl.shallowClone(options);\n\n        cloned.depth = 0;\n        cloned.root = fullPath;\n\n        readdirp(cloned)\n          .on('warn', log.error)\n          .on('error', log.error)\n          .on('data', function (entry) {\n            try {\n              watchFile(entry, 'change', startedWatching, update);\n            } catch(e) {\n              log.error('Not watching: ' + entry.path);\n            }\n          });\n      })\n      .on('unlink', function (path) {\n        watchers[fullPath] = void 0;\n      });\n  }\n\n  readdirp(options)\n    .on('warn', log.error)\n    .on('error', log.error)\n    .on('data', function (entry) {\n      try {\n        watchFile(entry, 'change', startedWatching, update);\n        watchDir(entry.fullParentDir, utl.shallowClone(options), watching, update);\n      } catch(e) {\n        log.error('Not watching: ' + entry.path);\n      }\n    })\n    .on('end', function () {\n      watchDir(options.root, utl.shallowClone(options), watching, update);\n      if (watching) watching(watchers);\n    });\n}\n\nmodule.exports = {\n    watchFile: watchFile\n  , watchTree: watchTree\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/feedEdits.js":"'use strict';\n\nvar path        =  require('path')\n  , fs          =  require('fs')\n  , cardinal    =  require('cardinal')\n  , state       =  require('./state')\n  , utl         =  require('./utl')\n  , log         =  require('./log')\n  , rewrite     =  require('./rewrite')\n  , wire        =  require('./wire')\n  , requireLike =  require('require-like')\n  , talk        =  require('./talk')\n  , config      =  require('../config/current')\n  , findexquire =  require('./findexquire')\n  ;\n\nmodule.exports = function feedEdits(stdin, stdout) {\n  var repl       =  state.repl\n    , rli        =  repl.rli\n    , feed       =  config.feed\n    , exportsKey =  config.feed.exports || '$';\n\n  state.format = feed.format || {\n      indent      :  { style: '  ', base: 0 }\n    , quotes      :  'single'\n    , json        :  false\n    , renumber    :  false\n    , hexadecimal :  false\n    , escapeless  :  false\n    , compact     :  true\n    , parentheses :  false\n    , semicolons  :  false\n  };\n\n  function feedEdit(file) {\n\n    if (state.fileFeedSuspended) return;\n\n    function adaptGlobals() {\n      global.require    =  findexquire(file.fullPath, true);\n      global.__filename =  file.fullPath;\n      global.__dirname  =  path.dirname(file.fullPath);\n      global.exports    =  global.module.exports;\n    }\n\n    function restoreGlobals() {\n      global.require = findexquire(path.join(process.cwd(), 'repl.js'), true);\n    }\n\n    function emitHighlightedCode(src, format) {\n      if (config.highlight) {\n        // force 'compact' since there is no point in sourcing entire code if we printed it highlighted already\n        format.compact = true;\n        try {\n          stdout.write(cardinal.highlight(src, { linenos: true }) + '\\n');\n        } catch(e) { }\n      }\n    }\n\n    function rewriteCode(src, format) {\n      try {\n        return rewrite(src, format);\n      } catch (e) {\n        stdout.write('\\n');\n        log.error('Unable to parse source from: ' + file.path + '\\n' + e);\n        return null;\n      }\n    }\n\n    function emitCode(rewritten) {\n      // ensure emitted lines don't become part of the history\n      var currentHist = rli.history.slice(0);\n\n      wire.emit('emit-code.start');\n\n      try {\n        // source last in order to have results show last\n        stdin.emit('data', rewritten);\n      } catch(e) { }\n\n      wire.emit('emit-code.finish');\n      rli.history = currentHist;\n    }\n\n    function talkCode(code) {\n      talk(code, file);\n    }\n\n    fs.readFile(file.fullPath, 'utf-8', function (err, src) {\n      var format, rewritten;\n\n      if (err) return log.error(err);\n\n      // Avoid code being appended to garbage\n      rli.clearLine();\n\n      format = utl.shallowClone(state.format);\n\n      state.feedingFile = true;\n      emitHighlightedCode(src, format);\n\n      rewritten = rewriteCode(src, format);\n\n      if (!rewritten) return repl.displayPrompt();\n\n      try {\n        adaptGlobals();\n\n        emitCode(rewritten);\n        log.displayPrompt();\n\n        // talking after emitting causes error inside difflet in cases so for now we talk first\n        talkCode(src);\n        log.displayPrompt();\n\n        state.lastFedFile = file;\n        global[exportsKey] = global.module.exports;\n\n      } finally {\n        restoreGlobals();\n        repl.displayPrompt();\n        state.feedingFile = false;\n      }\n    });\n  }\n\n  return feedEdit;\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/rewrite.js":"'use strict';\n\nvar escodegen = require('escodegen')\n  , esprima = require('esprima')\n  , path = require('path')\n  ; \n\nmodule.exports = function rewrite(src, format) {\n  var ast = esprima.parse(src)\n    , regenerated = escodegen.generate(ast, { format: format }) + '\\n';\n\n  return regenerated\n        // remove shebang\n        .replace(/^\\#\\!.*/, '');\n};\n\n// TODO: turn into test\n/*var code = '' + \nfunction read() {\n  var path = require('path')\n    , fs = require('fs')\n\n  // comments should be ignored\n  return fs.readdirSync(path.join(__dirname, '..'))\n}*/\n\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/talk.js":"'use strict';\n\nvar scriptieTalkie =  require('scriptie-talkie')\n  , log            =  require('../lib/log')\n  , config         =  require('../config/current');\n\nmodule.exports = function (code, file) {\n  if (!(config.scriptietalkie && config.scriptietalkie.active)) return;\n\n  scriptieTalkie(\n      code\n    , file.fullPath\n    , { writeln: log.print.bind(log), diff: config.scriptietalkie }\n  );\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/findexquire.js":"'use strict';\n\nvar findex        =  require('findex')\n  , fs            =  require('fs')\n  , path          =  require('path')\n  , log           =  require('./log')\n  , packDox       =  require('./dox/pack')\n  , requireLike   =  require('require-like')\n  , findParentDir =  require('find-parent-dir')\n  , xtend         =  require('util')._extend\n  , colors        =  require('ansicolors')\n  , wire          =  require('./wire')\n  , indexedDirs   =  {}\n  , indexes       =  {}\n\nfunction indexDirectory(dir, dirFilter, cb) {\n  if (indexedDirs[dir]) return;\n  indexedDirs[dir] = true;\n\n  findex.fork({ root: dir, directoryFilter: dirFilter, debug: false }, function (err, indexes_) {\n    if (err) {\n      log.error(err);\n      cb();\n    }\n\n    indexedDirs = indexes_.indexedDirs\n      .reduce(function (acc, x) {\n        acc[x] = true;\n        return acc;\n      }, indexedDirs);\n\n    indexes = xtend(indexes, indexes_);\n    indexes.find = findex.find.bind(indexes);\n\n    cb();\n  });\n}\n\n// on first the first run we don't want to include the module's dependencies\nvar firstFilter = [ '!.git', '!.svn', '!test', '!tests', '!node_modules' ];\n\n// on the second run we start inside the package's node_modules dir and will include all node_modules below as well\nvar secondFilter = firstFilter.slice(0, -1);\n\n/**\n * Returns custom require which does the following:\n *  - adjusts require to work relative to the given requirePath\n *  - ensures that required modules are never cached in order to pick up changes made to the required module (if uncached is set)\n *  - indexes all functions of the required module first and of all its dependencies second\n *  - the indexing step is performed on a forked process in order to not interfer with the main process, the repl itself\n *\n * @name exports\n * @function\n * @param requirePath {String} the path to which the require should be relative (i.e. the file from which the require is called)\n * @param uncached {Boolean} if true the module cache will be cleared before each require\n * @return {Function} adjusted require that behaves and has side effects as explained\n */\nvar go = module.exports = function (requirePath, uncached) {\n  var reqlike = requireLike(requirePath, uncached);\n\n  function wrap (request) {\n    var mdl = reqlike(request);\n    var from = reqlike.resolve(request);\n    var fromdir = path.dirname(from);\n\n    findParentDir(from, 'package.json', function (err, packagedir) {\n      if (err) return log.error(err);\n\n      // now we now the packagedir and can attach dox that print readme\n      packDox(mdl, request, packagedir);\n     \n      // first indexing run only handles functions of the required module itself\n      indexDirectory(fromdir, firstFilter, function () {\n        log.sillyln('updated', fromdir);\n        wire.emit('findex-first-pass', requirePath);\n\n        // now lets take care of all functions found in the dependencies of the module\n        var dependencies = path.join(fromdir, 'node_modules');\n        fs.exists(dependencies, function (exists) {\n          if (!exists) return;\n          indexDirectory(dependencies, secondFilter, function () {\n            wire.emit('findex-second-pass', requirePath);\n            log.sillyln('updated %s dependencies', fromdir);\n          });\n        });\n      });\n\n    });\n\n    return mdl;\n  }\n  wrap.resolve = reqlike.resolve.bind(reqlike);\n  return wrap;\n}\n\n// TODO: the approach may not be ideal because:\n// - npm places common dependencies in a sibling directory instead of nested (especially when npm dedupe is used)\n// - therefore we may not find those when indexing contained node_modules\n// - two alternatives:\n//    1. require everything that is a dir level above (excluding node_modules)\n//    2. look for dependencies in package.json, require.resolve them and index the containing directory\n\ngo.find = function (fn) { return indexes.find ? indexes.find(fn) : []; };\ngo.indexes = indexes;\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/pack/index.js":"'use strict';\nvar fs        =  require('fs')\n  , path      =  require('path')\n  , os        =  require('os')\n\nvar log          =  require('../../log')\n  , openReadme   =  require('./open-readme')\n  , getPackinfo  =  require('./get-packinfo')\n  , divider      =  require('./divider')\n  , readReadme   =  require('./read-readme')\n  , renderReadme =  require('./render-readme');\n\n// backwards compat with node 0.8\nvar tmpdir = typeof os.tmpdir === 'function' ? os.tmpdir : os.tmpDir;\n\nfunction getTmpFile (name) {\n  return path.join(tmpdir(), name + '.html');\n}\n\n/**\n * Attempts to find and render and/or the readme in a browser for a module whose '.dox()' function is invoked.\n * Since the user will wait for the printout, there is no need to do anything async here, therefore\n * existsSync and readSync are used.\n *\n * If the readme cannot be rendered, its text is returned as is.\n * If the readme is not found, a string containing that information is returned\n * \n * @name exports\n * @function\n * @param mdl \n * @param name \n * @param packagedir {String} full path to the root path of the package (where the readme is expected to be)\n */\nvar go = module.exports = function (mdl, name, packagedir) {\n\n  mdl.dox = function () {\n\n    var packinfo       =  getPackinfo(packagedir);\n    var readmeSrc      =  packinfo.readme || readReadme(packagedir, packinfo.readmeFilename);\n    var renderedReadme =  renderReadme(name, packagedir, readmeSrc);\n    var tmpFile        =  getTmpFile(name);\n    \n    openReadme(name, packinfo, tmpFile, readmeSrc);\n    \n    return { __replpad_print_raw__: renderedReadme + packinfo.rendered };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/pack/open-readme.js":"'use strict';\n\nvar fs        =  require('fs')\n  , path      =  require('path')\n  , opener    =  require('opener')\n  , marked    =  require('marked').setOptions({ gfm: true, breaks: true, tables: true })\n  , connected =  require('hasinternet');\n\nvar log    =  require('../../log')\n  , config =  require('../../../config/current');\n\nvar cssPath = path.join(__dirname, 'gfm.css')\n  , cssLink = '<link rel=\"stylesheet\" href=\"' + cssPath + '\" type=\"text/css\" media=\"screen\" charset=\"utf-8\">\\n';\n\nfunction title (name) {\n  return '<title>' + name + '</title>\\n';\n}\n\n// write readme to tmp file and print it to the repl to allow user to manually open it\n// automatically opens the readme if the readme.open flag is set\nfunction writeNopenReadme (name, tmpFile, src) {\n  var html;\n  try {\n    html = marked(src);\n  } catch (e) {\n    log.sillyln(e);\n    log.warnln('Unable to parse readme for ' + name);\n  }\n\n  html = title(name) + cssLink + html;\n\n  fs.writeFile(tmpFile, html, 'utf8', function (err) {\n    if (err) {\n      log.sillyln(err);\n      log.warnln('Unable to write rendered readme html, please ensure access to ' + path.dirname(tmpFile));\n      return;\n    }\n    log.println('Rendered:\\tfile://' + tmpFile);\n    if (config.readme.open) opener(tmpFile);\n  });\n\n  return tmpFile;\n}\n\n/**\n * Prints urls where readme for package resides online.\n * Writes local readme if we are not online or no url was given in the package.\n * Automatically opens either the local readme or the url if the readme.open flag is set\n *\n * @function\n * @param name {String} module name\n * @param packinfo {Object} url info from packags.jsoin\n * @param tmpFile {String} path to tmp file at which local readme should be stored if needed.\n * @param src {String} the markdown content of the readme\n * @return {void}\n */\nmodule.exports = function (name, packinfo, tmpFile, src) {\n  function tryNopenLocal () {\n    return src ? writeNopenReadme(name, tmpFile, src) : log.warnln('Unable to write/open local or remote readme for ' + name);\n  }\n  \n  var url = packinfo.homepage || packinfo.url;\n  if (!url) return tryNopenLocal();\n\n  // determine if we need to create a local readme in order to either open it or print path for user to click on\n  connected(function (err, isconnected) {\n    // NiceToHave: also test that either url actually exists and if not render locally as well\n    if (!isconnected) return tryNopenLocal();\n    if (config.readme.open) opener(url);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/pack/get-packinfo.js":"'use strict';\n\nvar path = require('path')\n  , divider = require('./divider');\n\n/**\n * Gets the package info from the package.json of the package dir, including the rendered version.\n * \n * @name getPackInfo\n * @function\n * @param packagedir {String} dir where package.json is found\n * @return {Object} with homepage and/or github repo urls and a rendered version of the two\n */\nmodule.exports = function (packagedir) {\n  var pack, info = { rendered: '' };\n  try {\n    pack = require(path.join(packagedir, 'package.json'));\n\n    if (pack.homepage) {\n      info.homepage = pack.homepage;\n      info.rendered += 'homepage:\\t' + pack.homepage + '\\n';\n    }\n    if (pack.repository && pack.repository.url) {\n      var browsableUrl = pack.repository.url\n        .replace(/^git\\:(\\/\\/|@)/, 'https://')\n        .replace(/\\.git$/, '');\n\n      info.url = browsableUrl;\n      info.rendered += 'repository:\\t' + browsableUrl;\n    }\n    info.readmeFilename = pack.readmeFilename;\n    info.readme = pack.readme;\n  } catch (e) {\n    info.rendered = 'No homepage or github repository url found for this package.';\n  }\n  info.rendered = divider('URLS') + info.rendered;\n  return info;\n}\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/pack/divider.js":"'use strict';\nvar colors = require('ansicolors')\n\nmodule.exports = function divider (x) { \n  return '\\n' + colors.bgMagenta(colors.brightYellow('-- ' + x + ' --')) + '\\n';\n}\n\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/pack/read-readme.js":"'use strict';\n\nvar fs = require('fs')\n  , path = require('path');\n\nfunction pair (names, exts) {\n  return names.reduce(function (acc, name) {\n    return acc.concat(exts.map(function (ext) { return name + ext; }));\n  }, []);\n}\n\nfunction getReadmePath (packagedir, readmeFilename) {\n  var tries = pair([ 'README', 'readme', 'Readme', 'ReadMe' ], [ '.md', '.markdown', '.MARKDOWN', '.MD' ]);\n\n  // most likely the readmeFilename is correct\n  if (readmeFilename) tries.unshift(readmeFilename);\n\n  var match;\n  tries.some(function (x) {\n    var p = path.join(packagedir, x);\n    if (fs.existsSync(p)) return match = p, match;\n  });\n\n  return match;\n}\n\n/**\n * Attempts to find the readme in the given package dir, trying different common readme names and returns its content.\n *\n * @function\n * @param packagedir {String} path in which the readme of the package hopefully resides.\n * @param readmeFilename {String} path to readme that was supplied in package.json which we'll try to read first\n * @return {String} readme content (markdown) or null if readme was not found\n */\nmodule.exports = function (packagedir, readmeFilename) {\n  var readmePath = getReadmePath(packagedir, readmeFilename);\n  return readmePath ? fs.readFileSync(readmePath, 'utf8') : null;\n}\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/pack/render-readme.js":"'use strict';\n\nvar msee = require('msee')\n  , divider = require('./divider')\n  , config =  require('../../../config/current');\n\n/**\n * Renders the markdown of the readme of a package, including syntax highlighting, so it can be printed to the repl.\n *\n * @function\n * @param name {String} name of the package\n * @param packagedir {String} package path\n * @param src {String} the markdown to render\n * @return {String} rendered readme (including terminal escape codes)\n */\nmodule.exports = function (name, packagedir, src) {\n  if (!config.readme.render) return '';\n\n  var md = 'Sorry, but no readme was found for ' + name + ' in ' + packagedir;\n\n  if (src) {\n    try {\n      md = msee.parse(src);\n    } catch (e) {\n      md = src;\n    }\n  }\n  return divider('README') + md;\n}\n\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/core/index.js":"var Module   =  require('module')\n  , repl     =  require('repl')\n  , print    =  require('./print')\n  , builtins =  repl._builtinLibs\n  ;\n\nfunction attachDox(request, module) {\n  if (builtins.indexOf(request) < 0 ) return;\n\n  Object.keys(module)\n    .filter(function (k) {\n      return typeof module[k] === 'function' \n          && typeof module[k].dox === 'undefined';\n    })\n    .forEach(function (k) {\n      module[k].dox = function () { print(request, k); };\n    });\n}\n\nmodule.exports = function core(repl) {\n  var real_load = Module._load;\n  Module._load = function(request, parent, isMain) {\n    var module = real_load.apply(this, arguments);\n    attachDox(request, module);\n    return module;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/core/print.js":"'use strict';\n\nvar fs           =  require('fs')\n  , format       =  require('util').format\n  , cardinal     =  require('cardinal')\n  , hermit       =  require('hermit')\n  , colors       =  require('ansicolors')\n  , styles       =  require('ansistyles')\n  , anchorHeader =  require('anchor-markdown-header')\n  , log          =  require('../../log')\n  , retrieve     =  require('./retrieve')\n  , rootUrl      =  format('http://nodejs.org/docs/%s/api', process.version)\n  ;\n\nfunction getUrls(mod) {\n  return {\n      json: format('%s/%s.json', rootUrl, mod)\n    , html: format('%s/%s.html', rootUrl, mod)\n  };\n}\n\nfunction getModule(json, moduleName) {\n  var matches = json.modules.filter(function (x) {\n    return x.type === 'module' && x.name === moduleName;\n  });\n  return matches.length ? matches[0] : null;\n}\n\nfunction getMethod(mdl, methodName) {\n  var matches = mdl.methods.filter(function (x) {\n    return x.type === 'method' && x.name === methodName;\n  }) ;\n  return matches.length ? matches[0] : null;\n}\n\nfunction get(json, moduleName, methodName) {\n  var mod = getModule(json, moduleName);\n  return mod ? getMethod(mod, methodName) : null;\n}\n\nfunction anchorStyle(url) {\n  return styles.underline(colors.blue(url));\n}\n\nfunction printDoc(json, mdl, methodName, mdlUrl) {\n  var present = ['']\n    , methodSignature;\n\n  var method = get(json, mdl, methodName);\n  if (!method) { \n    log.print('\\n\\nSorry, no docs found for %s.%s.\\n', mdl, methodName);\n    return log.println('URL: %s\\n', anchorStyle(mdlUrl));\n  }\n\n  present.push(styles.underline('\\n' + methodName + '\\n'));\n\n  try {\n    methodSignature = cardinal.highlight(method.textRaw);\n  } catch (e) {\n    methodSignature = method.textRaw;\n  }\n  present.push(colors.bgBlack(methodSignature));\n\n  var anchoredHeader = anchorHeader(method.textRaw, 'nodejs.org', 0, mdl)  \n    // i.e. remove [fs.read(..)] and enclosing () from [fs.read(..)](#fs_fs_read...)\n    , relUrl = anchoredHeader.slice(method.textRaw.length + 3, -1)\n    , link = mdlUrl + relUrl\n    , anchor = anchorStyle(link);\n\n  hermit(method.desc, function (err, res) {\n    present.push(res);\n    present.push('URL: ' + anchor + '\\n');\n\n    log.println(present.join('\\n'));\n  });\n}\n\nmodule.exports = function (mdl, methodName) {\n  var urls = getUrls(mdl);\n  retrieve(urls.json, mdl, function (err, doc) {\n    if (err) return log.error(err);\n    printDoc(doc, mdl, methodName, urls.html);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/dox/core/retrieve.js":"var mkdirp     =  require('mkdirp')\n  , fs         =  require('fs')\n  , path       =  require('path')\n  , request    =  require('request')\n  , log        =  require('../../log')\n  , paths      =  require('../../../config/paths')\n  , utl        =  require('../../utl')\n  , caches     =  paths.caches\n  , dox        =  {};\n  \nif (!utl.existsSync(caches)) mkdirp(caches);\n\nfunction downloadDoc(url, mdl, docPath, cb) {\n  request(url, function (err, res, body) {\n    if (err) return cb(err);\n    if (res.statusCode === 404) return cb(new Error('Documentation at [' + url + '] not found.'));\n\n    try {\n      dox[mdl] = JSON.parse(body);\n    } catch (err) {\n      return cb(err);\n    }\n    cb(null, dox[mdl]);\n\n    // Write file after returning module to minimize wait time\n    fs.writeFile(docPath, body, 'utf-8', function (err) {\n      if (err) log.error(err);\n    });\n  });\n}\n\nmodule.exports = function retrieveDoc(url, mdl, cb) {\n  var docPath = path.join(caches, mdl + '.json');\n  try {\n    dox[mdl] = dox[mdl] || require(docPath);\n    cb(null, dox[mdl]);\n  } catch (err) {\n    downloadDoc(url, mdl, docPath, cb);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/instructions.js":"'use strict';\n\nvar os     =  require('os')\n  , format =  require('util').format\n  , colors =  require('ansicolors')\n  , styles =  require('ansistyles')\n  , log    =  require('./log')\n  , pkg    =  require('../package')\n  , config =  require('../config/current')\n  , allPlugins = [ 'vim', 'matchtoken' ]\n  ;\n\nfunction pluginIsEnabled (x) {\n  return config.plugins[x] === undefined || config.plugins[x] === true;\n}\n\nvar enabledPlugins = config.plugins && typeof config.plugins === 'object'\n  ? allPlugins.filter(pluginIsEnabled) \n  : allPlugins;\n\nvar specs = { cpus: Object.keys(os.cpus()).length, platform: os.platform(), host: os.hostname() }\n  , v = process.versions\n  , plugins = enabledPlugins.map(colors.yellow).join(' | ');\n\nvar msgs = [\n    ''\n  , styles.underline(colors.brightRed('replpad')) + colors.yellow(' v' + pkg.version)\n  , ''\n  ,   format(colors.cyan('node') + ' %s', colors.yellow('v' + v.node))\n    + format(' | %s | %s cpus | %s platform', colors.green(specs.host), colors.green(specs.cpus), colors.green(specs.platform))\n    +  format(colors.cyan(' | v8') + ' %s | ' + colors.cyan('uv') + ' %s', colors.yellow('v' + v.v8), colors.yellow('v' + v.uv))\n  , ''\n  , 'plugins: ' + plugins\n  , ''\n  , 'If in doubt, enter ' + colors.yellow('.help')\n  , '' \n  ];\n\n\nmodule.exports = function (output) {\n  //msgs.forEach(function (msg) { log.print(msg); });\n  msgs.forEach(function (msg) { output.write(msg + '\\n'); });\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/builtins/init.js":"'use strict';\n\nvar plugClearScreen =  require('./clear-screen')\n  , plugAppend      =  require('./append')\n  , plugCommands    =  require('./commands')\n  , plugSrc         =  require('./src')\n  , plugPrompt      =  require('./prompt')\n  , state           =  require('../state')\n  ;\n\nmodule.exports = function initPlugins() {\n  var repl = state.repl;\n\n  plugClearScreen(repl);\n  plugAppend(repl);\n  plugCommands(repl);\n  plugSrc(repl);\n\n  plugPrompt(repl);\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/builtins/clear-screen.js":"'use strict';\nmodule.exports = function plugClearScreen(repl) {\n  var stdin = repl.inputStream\n    , stdout = repl.outputStream;\n\n  function clearScreen() {\n    stdout.write('\\u001B[2J\\u001B[0;0f');\n    repl.displayPrompt();\n  }\n\n  stdin.on('keypress', function (s, key) {\n    if (key && key.ctrl && key.name === 'l') clearScreen();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/builtins/append.js":"'use strict';\nvar fs             =  require('fs')\n  , log            =  require('../log')\n  , state          =  require('../state')\n  , completeAppend =  require('../complete-append');\n\n\nmodule.exports = function append(repl) {\n  var stdin = repl.inputStream\n    , stdout = repl.outputStream;\n\n  function appendHistoryToFile(entry, last, lines) {\n    if (!entry) { \n      log.warn('Since no file was sourced, I wouldn\\'t know what file to append to.');\n      return repl.displayPrompt();\n    }\n\n    var appendLine = repl.rli.history[last];\n    var append = completeAppend(repl.rli.history);\n\n    if (!append) { \n      log.warn('Found nothing in history that could be appended.');\n      return repl.displayPrompt();\n    }\n\n    state.fileFeedSuspended = true;\n\n    repl.displayPrompt();\n    log.info('%s>> \\'%s\\'', append.highlighted, entry.path);\n    repl.displayPrompt();\n\n    fs.appendFile(entry.fullPath, append.raw, function (err) {\n      state.fileFeedSuspended = false;\n      if (err) return log.error(err);\n    });\n  }\n\n  stdin.on('keypress', function (s, key) {\n    if (key && key.ctrl && key.name === 'a') {\n      appendHistoryToFile(state.lastFedFile, 0, 1);\n    }\n  });\n\n  repl.defineCommand('append', {\n      help: 'Appends the last entered parsable chunk of code or the last line to the last file that was sourced in the repl'\n    , action: function () { \n        appendHistoryToFile(state.lastFedFile, 1, 1); \n      }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/complete-append.js":"var cardinal =  require('cardinal')\n  , rewrite  =  require('./rewrite')\n  , config   =  require('../config/current')\n  , utl      =  require('./utl');\n\n/**\n * Tries to grab a complete JavaScript snippet from the history.\n *\n * @name completeAppend\n * @function\n * @param history {Array[{String}]} last entered lines in reverse order (i.e., last entered line is at index 0)\n * @return {Object} the smallest portion of the history that was parsable or just the last line if none was found as { raw, highlighted }\n */\nmodule.exports = function completeAppend(history) {\n  var highlighted\n    , code = ''\n    , rewritten\n    , l = history.length\n    , start = 0\n    , format = utl.shallowClone(config.feed.format);\n\n  if (l === 0) return null;\n\n  // skip commands, i.e. '.append'\n  while (/^[ ]*\\.\\w+[ ]*$/.test(history[start])) {\n    start++;\n    if (start == l) return null;\n  }\n\n  format.compact = false;\n  for (var i = start; i < l; i++) {\n    try {\n      code = '\\n' + history[i] + code;\n\n      rewritten = '\\n' + rewrite(code, format);\n      highlighted = cardinal.highlight(rewritten);\n      // no blow up means code was parsable, so we are done\n      return { raw: rewritten, highlighted: highlighted };\n    } catch (e) {/* keep trying */ }\n  }\n\n  code = '\\n' + history[start] + '\\n';\n  // we got here because no parsable portion was found\n  return { raw: code, highlighted: code };\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/builtins/commands.js":"'use strict';\nvar fs          = require('fs')\n  , path        = require('path')\n  , format      = require('util').format\n  , colors      = require('ansicolors')\n  , mothership  = require('mothership')\n  , log         = require('../log')\n  , utl         = require('../utl')\n  , config      = require('../../config/current')\n  , findexquire = require('../findexquire')\n  ;\n\nfunction currently(bool) {\n  return bool ? '[on] ' : '[off] ';\n}\n\nmodule.exports = function commands(repl) {\n  // '.command' pre 0.11 but 'command' afterwards\n\n  // remove obsolete .break command\n  delete repl.commands['.break'];\n  delete repl.commands['break'];\n  \n  var clearCommand = repl.commands['.clear'] || repl.commands.clear;\n  if(clearCommand) clearCommand.help = 'Break, and also clear the local context';\n\n  // redefine help to improve printout\n  repl.defineCommand('help', {\n    help: 'Show this list of repl commands',\n    action: function() {\n      Object.keys(this.commands)\n        .sort()\n        .forEach(function(name) {\n          var cmd = repl.commands[name]\n            , help = cmd.help || ''\n            , formattedName = colors.brightBlue(utl.pad(name, 15, ' '));\n\n          log.print('%s %s\\n', formattedName, help);\n        });\n      this.displayPrompt();\n    }\n  });\n\n  function compactHelp() {\n    return currently(config.feed.format.compact) + 'Toggles if code is compacted before being sourced to the repl'; \n  }\n\n  function updateCompact() {\n    log.info('Compact code ' + currently(config.feed.format.compact));\n    repl.commands['.compact'].help = compactHelp();\n  }\n\n  repl.defineCommand('compact', {\n      help: compactHelp()\n    , action: function (param) { \n        switch(param.toLowerCase()) {\n          case '': \n            config.feed.format.compact = !config.feed.format.compact;\n            updateCompact();\n            break;\n          case 'on': \n            config.feed.format.compact = true; \n            updateCompact();\n            break;\n          case 'off': \n            config.feed.format.compact = false; \n            updateCompact();\n            break;\n          default:\n            log.error('Need to supply on or off as argument. Example: .compact on');\n        }\n        this.displayPrompt();\n      }\n  });\n\n  function highlightHelp() {\n    return currently(config.highlight) + \n      'Toggles if syntax highlighted code is printed to the repl before being sourced';\n  }\n\n  function updateHighlight() {\n    log.info('Syntax highlight code ' + currently(config.highlight));\n    repl.commands['.highlight'].help = highlightHelp();\n  }\n\n  repl.defineCommand('highlight', {\n      help: highlightHelp() \n    , action: function (param) { \n        switch(param.toLowerCase()) {\n          case '': \n            config.highlight = !config.highlight;\n            updateHighlight();\n            break;\n          case 'on': \n            config.highlight = true; \n            updateHighlight();\n            break;\n          case 'off': \n            config.highlight = false; \n            updateHighlight();\n            break;\n          default:\n            log.error('Need to supply on or off as argument. Example: .highlight on');\n        }\n        repl.displayPrompt();\n      }\n  });\n\n  function depthHelp() {\n    return '[' + config.inspect.depth + '] ' +\n      'Sets the depth to which an object is traversed when printed to the repl';\n  }\n    \n  function updateDepth() {\n    log.info('Depth [%s]', config.inspect.depth);\n    repl.commands['.depth'].help = depthHelp();\n  }\n\n  repl.defineCommand('depth', {\n      help: depthHelp() \n    , action: function (depth) { \n        var num;\n        if (!depth) {\n          log.info('Current inspect depth is: %s. You can set it by supplying a number as argument.', config.inspect.depth);\n        } else if (isNaN(num = parseInt(depth, 10))) {\n          log.error('Need to supply a number for the depth. Example: .depth 4');\n        } else {\n          config.inspect.depth = num;\n          updateDepth();\n        }\n        this.displayPrompt();\n      }\n  });\n\n  function hiddenHelp() {\n    return currently(config.inspect.showHidden) + \n      'Set whether hidden properties are included during traversal of an object that is printed to the repl';\n  }\n\n  function updateHidden() {\n    log.info('Show hidden ' + currently(config.inspect.showHidden));\n    repl.commands['.hidden'].help = hiddenHelp();\n  }\n\n  repl.defineCommand('hidden', {\n      help: hiddenHelp() \n    , action: function (param) { \n        switch(param.toLowerCase()) {\n          case '': \n            config.inspect.showHidden = !config.inspect.showHidden;\n            updateHidden();\n            break;\n          case 'on': \n            config.inspect.showHidden = true; \n            updateHidden();\n            break;\n          case 'off': \n            config.inspect.showHidden = false; \n            updateHidden();\n            break;\n          default:\n            log.error('Need to supply on or off as argument. Example: .hidden on');\n        }\n        this.displayPrompt();\n      }\n  });\n\n  function talkHelp() {\n    if (!config.scriptietalkie) config.scriptietalkie = {};\n    return currently(config.scriptietalkie.active) + \n      'Toggles whether the file content is evaluated with scriptie-talkie when it is piped to the repl';\n  }\n\n  function updateTalk() {\n    if (!config.scriptietalkie) config.scriptietalkie = {};\n    log.info('Evaluate piped code with scriptie-talkie ' + currently(config.scriptietalkie.active));\n    repl.commands['.talk'].help = talkHelp();\n  }\n\n  repl.defineCommand('talk', {\n      help: talkHelp() \n    , action: function (param) { \n        if (!config.scriptietalkie) config.scriptietalkie = {};\n        switch(param.toLowerCase()) {\n          case '': \n            config.scriptietalkie.active = !config.scriptietalkie.active;\n            updateTalk();\n            break;\n          case 'on': \n            config.scriptietalkie.active = true; \n            updateTalk();\n            break;\n          case 'off': \n            config.scriptietalkie.active = false; \n            updateTalk();\n            break;\n          default:\n            log.error('Need to supply on or off as argument. Example: .talk on');\n        }\n        this.displayPrompt();\n      }\n  });\n\n  function firstPackageIsGood() { return true }\n\n  repl.defineCommand('pack', {\n    help: 'Load your package.json dependencies and devDependencies into the repl context',\n    action: function() {\n\n      // this may cause multiple packages to be required concurrently and findexquire looking up\n      // sources of their dependencies in turn which results in lots of listeneres for process.on('exit') to be registered\n      // so we'll set listeners to Infinity\n      process.setMaxListeners(0);\n\n      var res;\n      try {\n        res = mothership.sync(process.cwd(), firstPackageIsGood)\n      } catch (err)  {\n        log.sillyln(err);\n        return log.error('No package.json found from', process.cwd());\n      }\n\n      var root = path.dirname(res.path)\n        , pack = res.pack\n        , require_ = findexquire(res.path);\n\n      log.info('Adding the following local dependencies to the replpad context:');\n      Object.keys(pack.dependencies || {})\n        .concat(Object.keys(pack.devDependencies || {}))\n        .sort()\n        .forEach(function(dep){\n          var name = dep.replace(/-/g, '_');\n          try {\n            repl.context[name] = require_(dep);\n            log.print(name);\n          } catch(err) {\n            log.sillyln(err);\n            log.warn(format('Unable to load %s', dep));\n          }\n        })\n      this.displayPrompt();\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/builtins/src.js":"'use strict';\nvar findexquire     =  require('../findexquire');\nvar functionComment =  require('function-comment');\nvar cardinal        =  require('cardinal');\nvar log             =  require('../log');\nvar fs              =  require('fs');\n\nfunction newlinesIn(src) {\n  if (!src) return 0;\n  var newlines = src.match(/\\n/g);\n\n  return newlines ? newlines.length : 0;\n}\n\nfunction getComment (file, fnsrc, lineno) {\n  var src = fs.readFileSync(file, 'utf8');\n  try {\n   return functionComment(src, lineno);\n  } catch (e) {\n    log.sillyln(e);\n    return null;\n  }\n}\n\nmodule.exports = function plugSrc(repl /* not used */) {\n  Function.prototype.__defineGetter__('src', function () {\n    var fnsrc   =  this.toString();\n    var locs    =  findexquire.find(fnsrc);\n\n    var comment =  ''\n      , lineno\n      , firstline;\n\n    // make anonymous functions parsable\n    fnsrc = fnsrc.replace(/^function[ ]+\\(/, 'function fn(');\n\n    if (locs) {\n      locs.forEach(function (loc) {\n        fnsrc += '\\n// ' + loc.file + ':' + loc.start.line + ':' + loc.start.column;\n      });\n\n      if (locs.length === 1) lineno = locs[0].start.line;\n    }\n\n    if (lineno) {\n      comment = getComment(locs[0].file, fnsrc, lineno);\n\n      if (comment && comment.startline > 0) { \n        fnsrc = comment.comment + '\\n' + fnsrc;\n        firstline = comment.startline\n      } else {\n        firstline = lineno;\n      }\n    }\n\n    var lineInfo = { linenos: !!lineno, firstline: firstline };\n    try {\n      return { \n          __replpad_print_raw__: cardinal.highlight(fnsrc, lineInfo)\n        , lineInfo: lineInfo \n      };\n    } catch (e) {\n      log.sillyln(e);\n      return { __replpad_print_raw__: fnsrc, lineInfo: lineInfo };\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/builtins/prompt.js":"'use strict';\n\nvar config = require('../../config/current')\n  , colors = require('ansicolors');\n\nmodule.exports = function managePrompt(repl) {\n  var rli = repl.rli\n    , prompt = rli._prompt = config.prompt || rli._prompt\n    , vimrli = require('../vim-rli')\n    ;\n  \n  vimrli.vim.events\n    .on('normal', function () {\n      prompt = rli._prompt;\n      rli._prompt = colors.brightRed(prompt);\n      rli.prompt(true);\n    })\n    .on('insert', function () {\n      rli._prompt = prompt;\n      rli.prompt(true);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/bin/replpad.js":"#!/usr/bin/env node\n\n'use strict';\nvar repreprep = require('..')\n  , path = require('path');\n\nvar root = process.argv.length > 2 ? path.resolve(process.argv[2]) : null;\n\nrepreprep(root);\n","/home/travis/build/npmtest/node-npmtest-replpad/node_modules/replpad/lib/vim-rli.js":"'use strict';\n\nvar readlineVim =  require('readline-vim')\n  , wire = require('./wire')\n  , vim;\n\nmodule.exports = function hookVim(repl) {\n  vim = readlineVim(repl.rli);\n\n  // TODO: no clue why this doesn't work in here, but inside manage-plugins it does\n  // wire.on('emit-code.start', vim.forceInsert.bind(vim));\n\n  return vim;\n}; \n\n// needs to be getter since vim is initialized only once bindings are applied\nmodule.exports.__defineGetter__('vim', function () { return vim; });\n"}